# This file is read by Makefile.SH to produce rules for $(LIBPERL) (and
# some additional rules as well).

# Rerun `sh Makefile.SH; make depend' after making any change.

# Additional rules supported: perl_

perl_fullversion="5.00${PERL_VERSION}_$PERL_SUBVERSION"
case "$archname" in
 *-thread*)	perl_fullversion="${perl_fullversion}-threaded";;
esac

dll_post="`echo $perl_fullversion | sum | sed -e 's/^0*//' | awk '{print $1}'`"
dll_post="`printf '%x' $dll_post | tr '[a-z]' '[A-Z]'`"
if test -z "dll_post"; then
    echo "error: dll_post is emtpy.";
    exit 1;
fi

$spitshell >>Makefile <<!GROK!THIS!

PERL_FULLVERSION = $perl_fullversion

# No -DPERL_CORE
SO_CCCMD	= \$(CC) $ccflags \$(OPTIMIZE)

LD_OPT		=
PERL_DLL_LD_OPT = -Zdll -Zomf -Zhigh-mem -Zmap

PERL_DLL_BASE	= perl$dll_post
PERL_DLL	= \$(PERL_DLL_BASE)\$(DLSUFFIX)
TEST_PERL_DLL	= perl_dll_t
CONFIG_ARGS	= $config_args

!GROK!THIS!

$spitshell >>Makefile <<'!NO!SUBS!'
PREPLIBRARY_LIBPERL = $(LIBPERL)
$(LIBPERL) perl.lib: perl.imp perl5.def libperl_override.a
	emximp -o $@ perl.imp
	cp $@ perl.lib

imp_version: #$(FIRSTMAKEFILE) -crap
	echo $(PERL_DLL_BASE) > $@

libperl_override.imp: os2/os2add.sym miniperl$(EXE_EXT) imp_version
	./miniperl$(EXE_EXT) -wnle 'print "$$_\t$(PERL_DLL_BASE)\t$$_\t?"' os2/os2add.sym > $@
	echo	'strdup	$(PERL_DLL_BASE)	Perl_strdup	?' >> $@
	echo	'putenv	$(PERL_DLL_BASE)	Perl_putenv	?' >> $@

libperl_override.a: libperl_override.imp
	emximp -o $@ libperl_override.imp

libperl_dllmain.imp: imp_version
	echo	'_main	$(PERL_DLL_BASE)	_dll_perlmain	?' >> $@

libperl_dllmain$(LIB_EXT): libperl_dllmain.imp
	emximp -o $@ libperl_dllmain.imp

perl.imp: perl5.def imp_version
	emximp -o $@ perl5.def


.PHONY: perl_dll installcmd perlrexx test_prep_perl_ test_prep_various all_harness \
	all_test test_harness_redir

perl_dll: $(PERL_DLL)

perl_dll_t: t/$(PERL_DLL)

t/$(PERL_DLL): $(PERL_DLL)
	cp -f $(PERL_DLL) t/$(PERL_DLL)

$(PERL_DLL): $(obj) perl5.def perlmain$(OBJ_EXT) $(DYNALOADER)
	$(LD) $(LD_OPT) $(LDDLFLAGS) $(PERL_DLL_LD_OPT) -o $@ $(obj) perlmain$(OBJ_EXT) $(DYNALOADER) $(libs) perl5.def || ( rm $(PERL_DLL) && sh -c false )

perl5.olddef: perl.linkexp
	echo "LIBRARY '$(PERL_DLL_BASE)' INITINSTANCE TERMINSTANCE"	> $@
	echo DESCRIPTION "'Perl interpreter v$(PERL_FULLVERSION), export autogenerated'"	>>$@
	echo STACKSIZE 32768				>>$@
	echo CODE LOADONCALL				>>$@
	echo DATA LOADONCALL NONSHARED MULTIPLE		>>$@
	echo EXPORTS					>>$@
!NO!SUBS!

if [ ! -z "$myttyname" ] ; then
  $spitshell >>Makefile <<'!NO!SUBS!'
	echo '  "ttyname"'				>>$@
!NO!SUBS!
fi

$spitshell >>Makefile <<'!NO!SUBS!'
	cat perl.linkexp	>>$@

#	grep -v '"\(malloc\|realloc\|free\)"' perl.linkexp	>>$@


perl.exports: perl.exp EXTERN.h perl.h
	(echo "#include \"EXTERN.h\" \n#include \"perl.h\" \n#include \"perl.exp\"";	\
	 echo "malloc\nrealloc\ncalloc\nfree") | \
		$(CC) -DEMBED  -E - | \
		awk '{if ($$2 == "") print $$1}' | sort | uniq > $@

perl.linkexp: perl.exports perl.map  os2/os2.sym
	cat perl.exports os2/os2.sym perl.map | sort | uniq -d | sed -e 's/\w\+/  "\0"/' > perl.linkexp

# We link miniperl statically, since .DLL depends on $(DYNALOADER) 

miniperl.map: miniperl$(EXE_EXT)

miniperl$(EXE_EXT): $(obj) miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT)
	$(CC) $(CLDFLAGS) -o $@ miniperlmain$(OBJ_EXT) `echo $(obj)|sed -e 's/\bop\./opmini./g'` $(libs) -Zmap -Zargs-wild
	@./miniperl$(EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest

depend: os2/os2ish.h os2/os2thread.h

# Deal with os2/* stuff
os2$(OBJ_EXT): os2.c os2ish.h os2thread.h
os2.c:
	cp -f os2/$@ $@
dl_os2.c: os2/dl_os2.c
	cp -f os2/$@ $@
perlrexx$(OBJ_EXT): perlrexx.c os2ish.h os2thread.h
perlrexx.c:
	cp -f os2/$@ $@

os2ish.h: os2/os2ish.h
	cp -f $< $@

os2thread.h: os2/os2thread.h
	cp -f os2/$@ $@

installcmd :
	@perl -e 'die qq{Give the option INSTALLCMDDIR=... to make!} if $$ARGV[0] eq ""' $(INSTALLCMDDIR)
	./miniperl$(EXE_EXT) -Ilib os2/perl2cmd.pl $(INSTALLCMDDIR)

_preplibrary = miniperl$(EXE_EXT) lib/Config.pm lib/lib.pm lib/re.pm

PERLREXX_DLL = perlrexx.dll

# Dynamically loaded PM-application perl:

perl__$(EXE_EXT): $& $(PERL_DLL) libperl_dllmain$(LIB_EXT)
	$(CC) $(CLDFLAGS) $(CCDLFLAGS) -o $@ libperl_dllmain$(LIB_EXT) -Zlinker /PM:PM

# Forking dynamically loaded perl:

perl$(EXE_EXT): $& $(PERLREXX_DLL) $(PERL_DLL) libperl_dllmain$(LIB_EXT)
	$(CC) $(CLDFLAGS_DLL) $(CCDLFLAGS) -o $@ libperl_dllmain$(LIB_EXT)

clean: os2_clean

os2_clean:
	rm -f *.map perlrexx.dll perl___[0-9]*

perlrexx: $(PERLREXX_DLL)
	@sh -c true

# Remove -Zexe, add -Zdll -Zso.  No stack needed
SO_CLDFLAGS = -Zdll -Zomf

# A callable-from-REXX DLL

$(PERLREXX_DLL): perlrexx$(OBJ_EXT) perlrexx.def $(DYNALOADER) ext.libs
	$(SHRPENV) $(CC) $(SO_CLDFLAGS) $(CCDLFLAGS) -o $@ perlrexx$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LIBPERL) `cat ext.libs` $(libs) perlrexx.def

perlrexx.def: miniperl$(EXE_EXT) $(_preplibrary)
	echo	"LIBRARY 'perlrexx' INITINSTANCE TERMINSTANCE"	> $@
	echo	"DESCRIPTION '@#perl5-porters@perl.org:`miniperl$(EXE_EXT) -Ilib -MConfig -e 'print \$$]'`#@ REXX to Perl `miniperl$(EXE_EXT) -Ilib -MConfig -e 'print \$$Config{version}'` interface'" >> $@
	echo	"EXPORTS"					>> $@
	echo	'  "_PERL"'					>> $@
	echo	'  "_PERLTERM"'					>> $@
	echo	'  "_PERLINIT"'					>> $@
	echo	'  "_PERLEXIT"'					>> $@
	echo	'  "_PERLEVAL"'					>> $@
	echo	'  "_PERLLASTERROR"'				>> $@
	echo	'  "_PERLEVALSUBCOMMAND"'			>> $@
	echo	'  "_PERLEXPORTALL"'				>> $@
	echo	'  "_PERLDROPALL"'				>> $@
	echo	'  "_PERLDROPALLEXIT"'				>> $@


perlrexx$(OBJ_EXT): perlrexx.c
	$(SO_CCCMD) $(PLDLFLAGS) -c perlrexx.c

# To test with harness, one needed to HARNESS_IGNORE_EXITCODE=2

# Define to be empty to get a TTY test
REDIR_TEST = 2>&1 | tee 00_$@

test_prep_perl_: test_prep_pre miniperl_$(EXE_EXT) ./perl_$(EXE_EXT)
	PERL=./perl_ $(MAKE) _test_prep

test_prep_various: test_prep_pre miniperl$(EXE_EXT) $(dynamic_ext) $(TEST_PERL_DLL)

all_test: test

test_harness_redir: test_prep
	-PERL=./perl $(MAKE) TESTFILE=harness _test $(REDIR_TEST)

all_harness: test_harness_redir

!NO!SUBS!

